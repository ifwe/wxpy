from __future__ import with_statement

import re
from path import path
import wxpyconfig

def iterincludes(flags):
    'Finds and returns all include directives in a list of commandline options.'

    for flag in flags:
        if flag.startswith('-I') or flag.startswith('/I'):
            yield flag

def find_setup_h(wxdir):
    'Given a list of cflags, returns the path to setup.h'

    includes = []
    setups   = []

    # TODO
    return path(wxdir) / 'include' / 'wx' / 'msw' / 'setup.h'

    for include in iterincludes(cxxflags):
        p = path(include[2:]) / 'wx' / 'setup.h'
        includes.append(p)
        if p.exists():
            setups.append(p)

    if not setups:
        raise Exception('could not find setup.h (searched: %r)' % includes)
    elif len(setups) > 1:
        raise Exception('multiple setup.h files found')

    return setups[0]

# pattern for finding "#define wxUSE_XXX" flags
use_define = re.compile('#define\s+(wxUSE_\w+)\s+(\w+)')
use_enabled = {'0': False, '1': True}

def get_enabled_features(setup_h):
    '''
    Return a mapping of all wxUSE_XXX flags in a setup.h like

    {'wxUSE_BUTTON': False}
    '''
    features = {}
    for i, line in enumerate(setup_h.lines(retain = False)):
        match = use_define.search(line)
        if match:
            flag, enabled = match.groups()
            if not flag.startswith('wxUSE_'):
                raise ValueError('invalid match returned o`n line %d of %s: %r'
                                 % (i, setup_h, flag))

            if enabled in use_enabled:
                features[flag] = use_enabled[enabled]
            elif enabled in features:
                features[flag] = features[enabled]
            else:
                raise ValueError('invalid #define wxUSE_XXX value (%s) on line '
                                 '%d of %s: %r' % (enabled, i, setup_h, line))
    return features

def write_features(features, fileobj):
    write = fileobj.write
    for name in sorted(features):
        enabled = features[name]
        write(''.join(['%Feature ', name, '\n']))

def emit_features_file(wxdir, destfile):
    features = get_enabled_features(find_setup_h(wxdir))
    with open(destfile, 'w') as f:
        f.write(features_header)
        write_features(features, f)

    return features

features_header = '''\
//
// This file is automatically generated by setup.py. Any changes will be
// overwritten!
//

'''
