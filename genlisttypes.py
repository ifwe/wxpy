'''
Autogenerate some code from "list.sip.template" to make up
for weak SIP template support.
'''

from __future__ import with_statement
import os.path

types = [
    ('wxSizerItem', 'wxSizerItemList', ['<wx/sizer.h>']),
    ('wxWindow',    'wxWindowList',    ['<wx/window.h>']),
]

wrapper = '''\
//
// Autogenerated. See genlisttypes.py
//

%s
'''

header = '''\
//
// Autogenerated from list.sip.template. See genlisttypes.py.
'''


def gentype(typename, listtype, includes):
    includes = '\n'.join('#include %s' % i for i in includes)

    with open('list.sip.template') as f:
        return header + f.read().replace('LISTTYPE', listtype).replace('TYPE', typename).replace('INCLUDES', includes)

def filename(typename):
    if typename.startswith('wx'):
        typename = typename[2:]

    return 'generated/%s_list.sip' % typename.lower()

def write_if_different(filename, content):
    orig = None
    if os.path.isfile(filename):
        with open(filename, 'r') as f:
            orig = f.read()

    if orig != content:
        with open(filename, 'w') as f:
            f.write(content)
            return True

def generate():
    orig_dir = os.getcwd()
    os.chdir('src')
    try:
        filenames = []

        for t, typename, includes in types:
            type_filename = filename(t)
            filenames.append(type_filename)
            if write_if_different(type_filename, gentype(t, typename, includes)):
                print type_filename

        wrapper_txt = wrapper % '\n'.join('%%Include %s' % fn for fn in filenames)

        if not os.path.isdir('generated'):
            os.makedirs('generated')

        with open('generated/lists.sip', 'w') as f:
            f.write(wrapper_txt)
    finally:
        os.chdir(orig_dir)
